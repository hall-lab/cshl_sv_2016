#!/usr/bin/env python
import sys
import numpy as np
import optparse
from optparse import OptionParser

# output file format:
# 1 = chromosome a;
# 2 = coordinate start a (leftmost position of the first breakpoint-containing genomic interval)
# 3 = coordinate end a (rightmost position of the first breakpoint-containing genomic interval)
# 4 = chromosome b;
# 5 = coordinate start b (leftmost position of the second breakpoint-containing genomic interval)
# 6 = coordinate end b (rightmost position of the second breakpoint-containing genomic interval)
# 7 = breakpoint ID;
# 8 = support (total number of read-pair + split-read measurements)
# 9 = strand a (direction of breakpoint relative to read mappings; "+" indicates to right, "-" to left)
# 10 = strand b (direction of breakpoint relative to read mappings; "+" indicates to right, "-" to left)
# 11 = variant type (DEL=deletion; DUP=duplication; INV=inversion; INT=inter-chromosomal)
# 12 = evidence types detected (PE/SR)
# 13 = strand combinations clustered (useful for inversions and reciprocal translocations)
# 14 = sampleList (list of samples that have the breakpoint)
# 15 = evidenceSampleList (detailed list of samples, evidence types, and evidence observations)
# 16-N: sample_N total support

parser = OptionParser()

parser.add_option("-b",
    "--bedpe_file",
    dest="bedpe_file",
    help="BEDPE file")

parser.add_option("-c",
    "--config_file",
    dest="config_file",
    help="Tab-delim sample config file of NAME id TYPE. " + \
            "Example:NA12878 10  PE")

(options, args) = parser.parse_args()

if not options.bedpe_file:
    parser.error('BEDPE file not given')

if not options.config_file:
    parser.error('config file not given')

C_by_id = {}
C_id_order = {}
name_list = []

f = open(options.config_file,'r')
for l in f:
    A = l.rstrip().split()
    name = A[0]
    sample_id = A[1]
    data_type = A[2]

    C_by_id[sample_id] = [name,data_type]
    C_id_order[sample_id] = len(C_id_order)

    if name not in name_list:
        name_list.append(name)

f.close()

f = open(options.bedpe_file,'r')

for l in f:
    A = l.rstrip().split('\t')

    who=[]
    name_type_amount = []
    types=[]
    total_amount = 0
    sample_amount = dict.fromkeys(name_list, 0)

    sv_type = A[10][5:8]

    strand_combos = A[12][8:].replace(',',':').replace(';',',')

    for sample_id_amount in A[11][4:].split(';'):
        sample_id,amount = sample_id_amount.split(',')

        total_amount += int(amount)
        sample_amount[C_by_id[sample_id][0]] += int(amount)

        if not C_by_id[sample_id][0] in who:
             who.append(C_by_id[sample_id][0])

        name_type_amount.append(\
                C_by_id[sample_id][0] + '_' + C_by_id[sample_id][1] + ':' +\
                amount)

        if not C_by_id[sample_id][1] in types:
            types.append(C_by_id[sample_id][1])

    type_string = ','.join(types)

    print '\t'.join(
            A[0:7] +
            [
                str(total_amount),
                A[8],
                A[9],
                sv_type,
                type_string,
                strand_combos,
                ','.join(who),
                ','.join(name_type_amount),
                '\t'.join(map(str, [sample_amount[x] for x in name_list]))
            ])

f.close()
